@using System.ComponentModel.DataAnnotations
@using Microsoft.IdentityModel.Tokens
@using OcenaPracowniczaLys.Data
@using OcenaPracowniczaLys.Models
@using OcenaPracowniczaLys.Services
@inject IDepartmentService DepartmentService
@inject IQuestionService QuestionService

<EditForm Model="@_request" OnValidSubmit="HandleCreateDepartment" FormName="UserChangePasswordForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <span class="mt-2">
        <label class="form-label" for="name">Treść pytania</label>
        <InputText class="form-control" id="name" @bind-Value="_request.QuestionText"/>
    </span>
    <span class="mt-2">
        <label class="form-label" for="prio">Priorytet (im niższy tym pytanie pojawi się wyżej)</label>
        <InputNumber class="form-control" id="prio" @bind-Value="_request.Priority"/>
    </span>
    <div class="mb-3">
        <label class="form-label" for="role">Wybierz dział główny</label>
        <InputSelect id="role" class="form-select" @bind-Value="@_request.MainDepartmentId">
            @if (_mainDepartments.IsNullOrEmpty())
            {
                <option value="-1">Błąd połączenia z bazą danych</option>
            }
            else
            {
                <option value="-1">Wybierz dział główny</option>
                @foreach (var d in _mainDepartments)
                {
                    <option value="@d.MainDepartmentId">@d.Name</option>
                }
            }
        </InputSelect>
    </div>

    <button class="btn btn-primary mt-3" type="submit">Dodaj</button>
    @if (!string.IsNullOrEmpty(_infoMessage))
    {
        <div class="@_infoClass mt-3">
            @_infoMessage
        </div>
    }
</EditForm>
@code {
    private AddQuestionRequest _request = new AddQuestionRequest();
    private string _infoMessage = "";
    private string _infoClass = "invisible"; // lub "d-none"
    private List<MainDepartment> _mainDepartments = [];

    protected override async Task OnInitializedAsync()
    {
        _mainDepartments = await DepartmentService.GetAllMainDepartmentsAsync();
    }

    private async Task HandleCreateDepartment(EditContext arg)
    {
        OperationResult result = await QuestionService.AddQuestionAsync(_request);

        _infoClass = result.Status.Equals("Success", StringComparison.OrdinalIgnoreCase)
            ? "alert alert-success" : "alert alert-danger";
        _infoMessage = result.Message;
    }

}