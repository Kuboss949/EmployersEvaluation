@page "/dodaj-ocene"
@using Microsoft.EntityFrameworkCore.Infrastructure
@using Microsoft.IdentityModel.Tokens
@using OcenaPracowniczaLys.Data
@using OcenaPracowniczaLys.Models
@using OcenaPracowniczaLys.Services
@using OcenaPracowniczaLys.TextAssets
@inject IUserService UserService
@inject IEvaluationService EvaluationService
@inject IDepartmentService DepartmentService
@inject IQuestionService QuestionService

@if (_isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Ładowanie...</span>
        </div>
        <p>Ładowanie danych, proszę czekać...</p>
    </div>
}
else
{
    <div class="container min-vh-100 d-flex align-items-center">
        <div class="row w-100 justify-content-center">
            <div class="col-md-6">
                <h3 class="display-4 mb-5">Dodaj Ocenę</h3>
                <EditForm class="d-flex flex-column  justify-content-center" Model="@_request"
                          OnValidSubmit="HandleEvaluationAdd" FormName="UserLoginForm">
                    <span class="mt-2">
                        <label class="form-label" for="main-department">Dział</label>
                        @foreach (var dept in _mainDepartments)
                        {
                            <div>
                                <input type="radio"
                                       name="main-department"
                                       id="@dept.MainDepartmentId"
                                       value="@dept.MainDepartmentId"
                                       @onchange="ChangeQuestionSet"
                                       checked="@( (_request.MainDepartment ?? "").Equals(dept.Name, StringComparison.OrdinalIgnoreCase) )" />
                                <label for="@dept.MainDepartmentId">@dept.Name</label>
                            </div>
                            
                        }
                    </span>
                    <span class="mt-2">
                        <label class="form-label" for="name">Imię i nazwisko</label>
                        <InputText class="form-control" id="name" @bind-Value="_request.Name"/>
                    </span>

                    <span class="mt-2">
                        <label class="form-label" for="position">Stanowisko</label>
                        <InputText class="form-control" id="position" @bind-Value="_request.Position"/>
                    </span>


                    <span class="mt-2">
                        <label class="form-label" for="supervisor">Przełożony bezpośredni</label>
                        <InputSelect id="supervisor" class="form-select" @bind-Value="@_request.SupervisorId">
                            @if (_supervisors.IsNullOrEmpty())
                            {
                                <option value="-1">Błąd połączenia z bazą danych</option>
                            }
                            else
                            {
                                <option value="">Wybierz swojego kierownika</option>
                                @foreach (var user in _supervisors)
                                {
                                    <option value="@user.UserId">@user.FullName</option>
                                }
                            }
                        </InputSelect>
                    </span>

                    <span class="mt-2">
                        <label class="form-label" for="department">Dział</label>
                        <InputSelect id="department" class="form-select" @bind-Value="@_request.Department">
                            @if (_departments.IsNullOrEmpty())
                            {
                                <option value="-1">Błąd połączenia z bazą danych</option>
                            }
                            else
                            {
                                <option value="">Wybierz swój dział</option>
                                @foreach (var dep in _departments)
                                {
                                    @if (dep.ManagerId.ToString()!.Equals(_request.SupervisorId))
                                    {
                                        <option value="@dep.DepartmentId">@dep.Name</option>
                                    }
                                }
                            }
                        </InputSelect>
                    </span>
                    <span class="mt-5 mb-3 display-6">@_request.MainDepartment</span>
                    @foreach (var entry in _request.Answers)
                    {
                        <div class="mb-3">
                            <label class="form-label" for="@($"question{entry.QuestionId}")">
                                @entry.QuestionContent
                            </label>
                            <InputTextArea id="@($"question{entry.QuestionId}")"
                                           class="form-control"
                                           @bind-Value="entry.Answer" />
                        </div>
                    }
                        @* <div class="mt-2 d-flex flex-column"> *@
                        @*     <label class="form-label" for="@($"question4")">@_productionQuestions[4]</label> *@
                        @*     <InputTextArea id="@($"question4")" *@
                        @*                    @bind-Value="_request.Questions[4]"> *@
                        @*     </InputTextArea> *@
                        @* </div> *@
                    
                    <button class="mt-5 mb-5" type="submit">Dodaj</button>
                </EditForm>
                <div class="@_infoClass">
                    @_infoMessage
                </div>
            </div>
        </div>
    </div>
}


@code {
    private AddEvaluationRequest _request = new AddEvaluationRequest();
    private List<User> _supervisors = [];
    private List<Department> _departments = [];
    private List<MainDepartment> _mainDepartments = [];
    private List<Question> _questions = [];
    private List<Question> _questionsFiltered = [];
    private string _infoMessage = "";
    private string _infoClass = "invisible";
    private bool _isLoading = true;


    protected override async Task OnInitializedAsync()
    {
        _supervisors = await UserService.GetAllSupervisorsAsync();
        _departments = await DepartmentService.GetAllDepartmentsAsync();
        _isLoading = false;
        _questions = await QuestionService.GetEnabledQuestionsAsync();
        _mainDepartments = await DepartmentService.GetAllMainDepartmentsAsync();

    }

    private void ChangeQuestionSet(ChangeEventArgs e)
    {
        int index = int.Parse(e.Value.ToString());
        _request.MainDepartmentID = int.Parse(e.Value.ToString() ?? string.Empty);
        _request.MainDepartment = _mainDepartments.FirstOrDefault(d =>
            d.MainDepartmentId == index)
            ?.Name;
        _questionsFiltered = _questions.Where(q => q.MainDepartmentId == index).ToList();
        _request.Answers = _questionsFiltered.Select(q => new AnswerEntry
        {
            QuestionId = q.QuestionId,
            QuestionContent = q.QuestionText,
            Answer = string.Empty
        }).ToList();
    }
    
    private async Task HandleEvaluationAdd()
    {
        if (!_request.IsFull())
        {
            _infoMessage = "Ups! Chyba coś zapomniałeś/aś wypełnić. Sprawdź czy wszystkie wymagane pola są zapełnione";
            _infoClass = "alert alert-danger";
            return;
        }

        OperationResult result = await EvaluationService.AddEvaluationAsync(_request);
        
        _infoClass = result.Status.Equals("Success") ? "alert alert-success" : "alert alert-danger";
        _infoMessage = result.Message;
        
    }
}
