@page "/odpowiedzi"
@using OcenaPracowniczaLys.AuthenticationProvider
@inject IEvaluationService EvaluationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
<div class="container-fluid min-vh-100 d-flex">
    <div class="row w-100">
        <div class="col-md-3">
            <div class="mt-2">
                <label class="form-label" for="name">Imię i nazwisko</label>
                <InputText class="form-control" id="name" @bind-Value="@_filterName"/>
            </div>
            <div class="mt-2">
                <label class="form-label" for="department">Dział</label>
                <InputSelect id="department" class="form-select" @bind-Value="@_filterDepartmentName">
                    <option value="">Wybierz dział</option>
                    @foreach(var name in _availableDepartments)
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
            </div>
            <div class="mt-2">
                        <label class="form-label" for="supervisor">Rok</label>
                        <InputSelect id="supervisor" class="form-select" @bind-Value="@_filterYear">
                            <option value="-1">Wybierz rok</option>
                            @for (int i = 2023; i <= DateTime.Now.Year; i++)
                            {
                                <option value="@i">@i.ToString()</option>
                            }
                        </InputSelect>
                    </div>
            <ul class="mt-3 list-group">
                <li class="list-group-item">
                    Bezpośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredDirectAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.EmployeeName @ev.CreatedAt.Year 
                            @if (ev.ManagerAnswer is not null)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-reply-fill" viewBox="0 0 16 16">
                                    <path d="M5.921 11.9 1.353 8.62a.72.72 0 0 1 0-1.238L5.921 4.1A.716.716 0 0 1 7 4.719V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z"/>
                                </svg>
                            }
                                </li>
                        }
                    </ul>
                </li>
                <li class="list-group-item">
                    Pośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredIndirectAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.EmployeeName @ev.CreatedAt.Year
                                @if (ev.ManagerAnswer is not null)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-reply-fill" viewBox="0 0 16 16">
                                        <path d="M5.921 11.9 1.353 8.62a.72.72 0 0 1 0-1.238L5.921 4.1A.716.716 0 0 1 7 4.719V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z"/>
                                    </svg>
                                }    
                            </li>
                        }
                    </ul>
                </li>
            </ul>
        </div>
        <div class="col-md-9 mb-5">
            <button class="btn btn-primary m-2" @onclick="PrintFragment">Drukuj fragment</button>
            @* <AuthorizeView Roles="user"> *@
            @*     <Authorized> *@
                    @if (_selectedAnswer?.ManagerAnswer is null)
                    {
                        <button class="btn btn-primary m-2" @onclick="RedirectToAnswerFrom">Odpowiedz</button>
                    }
                    else
                    {
                        <button class="btn btn-primary m-2" @onclick="RedirectToAnswerFrom">Edytuj odpowiedź</button>
                    }
            @*     </Authorized> *@
            @* </AuthorizeView> *@

            <div id="printArea">
            @if (_selectedAnswerId != -1 && _selectedAnswer != null)
            {
                <div class="row gx-0">
                <div class="answer-part card m-2 col">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Dział
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.Department.Name
                    </div>
                </div>
                <div class="answer-part card m-2 col">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Imię i nazwisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.EmployeeName
                    </div>
                </div>
                <div class="answer-part card m-2 col">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Stanowisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.EmployeePosition
                    </div>
                </div>
                </div>
                @foreach(var answer in _selectedAnswer.EmployeeAnswers)
                {
                    <div class="answer-part card  mt-3">
                        <div class="bg-warning answer-part-name card-header fw-bold">
                            @answer.Question.QuestionText
                        </div>
                        <div class="answer-part-value card-body">
                            @answer.AnswerText
                        </div>
                    </div>
                    @if(_selectedAnswer.ManagerAnswer is not null)
                    {
                        <div class="answer-part card  mt-3">
                            <div class="bg-info answer-part-name card-header fw-bold">
                                Twoja odpowiedź
                            </div>
                            <div class="answer-part-value card-body">
                                @_selectedAnswer.ManagerAnswer?.ManagerAnswersTexts.FirstOrDefault(a => a.QuestionId == @answer.Question.QuestionId)?.AnswerText
                            </div>
                        </div>
                    }
                }
            }
            </div>
        </div>
    </div>
</div>

@code {
    private int _userId = 0;
    private List<Evaluation> _directAnswers = [];
    private List<Evaluation> _indirectAnswers = [];
    private List<string> _availableDepartments = [];
    private string _filterName = "";
    private string _filterYear = "-1";
    private string _filterDepartmentName = "";
    private int _selectedAnswerId = -1;
    private bool _isOwner = false;
    private Evaluation? _selectedAnswer = null;
    
    private IEnumerable<Evaluation> FilteredDirectAnswers =>
        _directAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.ManagerId != null &&
              e.EmployeeName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.CreatedAt.Year.ToString() == _filterYear)
            &&
            (string.IsNullOrWhiteSpace(_filterDepartmentName) ||
             e.Department.Name.Equals(_filterDepartmentName, StringComparison.OrdinalIgnoreCase))
        );

    private IEnumerable<Evaluation> FilteredIndirectAnswers =>
        _indirectAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.ManagerId != null &&
              e.EmployeeName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.CreatedAt.Year.ToString() == _filterYear)
            &&
            (string.IsNullOrWhiteSpace(_filterDepartmentName) ||
             e.Department.Name.Equals(_filterDepartmentName, StringComparison.OrdinalIgnoreCase))
        );

    
    protected override async Task OnInitializedAsync()
    {
        var appAuthStateProvider = (AppAuthStateProvider)AuthenticationStateProvider;
        var authState = await appAuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true && !authState.User.IsInRole("admin"))
        {
            Nav.NavigateTo("/login");
        }
        
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserId");
        if (userIdClaim != null)
        {
            _userId = int.Parse(userIdClaim.Value);
            _isOwner = authState.User.IsInRole("owner");
        }

        _directAnswers = _isOwner 
            ? [] 
            : await EvaluationService.GetAllDirectEvaluationsAsync(_userId);
        _indirectAnswers = _isOwner 
            ? await EvaluationService.GetAllEvaluationsAsync() 
            : await EvaluationService.GetAllIndirectEvaluationsAsync(_userId);

        var depDirect = _directAnswers.Select(e => e.Department).Select(d => d.Name);
        var depIndirect = _indirectAnswers.Select(e => e.Department).Select(d => d.Name);
        _availableDepartments = depDirect.Union(depIndirect).ToList();
    }

    private void ChangeSelectedAnswerId(int id)
    {
        _selectedAnswerId = id;
        _selectedAnswer = _directAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId)
                               ?? _indirectAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId);
    }
    [Inject] IJSRuntime JS { get; set; } = default!;

    private async Task PrintFragment()
    {
        await JS.InvokeVoidAsync("printFragment", "printArea");
    }

    private void RedirectToAnswerFrom()
    {
        Nav.NavigateTo($"/odpowiedz-na-ocene/{_selectedAnswerId}");
    }

}

