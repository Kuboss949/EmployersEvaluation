@page "/odpowiedzi"
@using Microsoft.AspNetCore.Components.Authorization
@using OcenaPracowniczaLys.AuthenticationProvider
@using OcenaPracowniczaLys.Data
@using OcenaPracowniczaLys.Services
@inject AuthenticationStateProvider AuthProvider
@inject IEvaluationService EvaluationService
@inject IDepartmentService DepartamentService
@inject IQuestionService QuestionService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
<div class="container-fluid min-vh-100 d-flex">
    <div class="row w-100">
        <div class="col-md-3">
            <span class="mt-2">
                <label class="form-label" for="name">Imię i nazwisko</label>
                <InputText class="form-control" id="name" @bind-Value="@_filterName"/>
            </span>
            <span class="mt-2">
                        <label class="form-label" for="supervisor">Rok</label>
                        <InputSelect id="supervisor" class="form-select" @bind-Value="@_filterYear">
                            <option value="-1">Wybierz rok</option>
                            @for (int i = 2023; i < DateTime.Now.Year; i++)
                            {
                                <option value="@i">@i.ToString()</option>
                            }
                        </InputSelect>
                    </span>
            <ul class="mt-3 list-group">
                <li class="list-group-item">
                    Bezpośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredDirectAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                                >@ev.EmployeeName @ev.CreatedAt.Year</li>
                        }
                    </ul>
                </li>
                <li class="list-group-item">
                    Pośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredIndirectAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.EmployeeName @ev.CreatedAt.Year</li>
                        }
                    </ul>
                </li>
            </ul>
        </div>
        <div class="col-md-9">
            <button class="btn btn-primary" @onclick="PrintFragment">Drukuj fragment</button>
            <button class="btn btn-primary" @onclick="RedirectToAnswerFrom">Odpowiedz</button>
            <div id="printArea">
            @if (_selectedAnswerId != -1 && _selectedAnswer != null)
            {
                <div class="d-flex">
                <div class="answer-part card m-2 flex-fill">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Dział
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.Department.Name
                    </div>
                </div>
                <div class="answer-part card m-2 flex-fill">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Imię i nazwisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.EmployeeName
                    </div>
                </div>
                <div class="answer-part card m-2 flex-fill">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Stanowisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswer.EmployeePosition
                    </div>
                </div>
                </div>
                @foreach(var answer in _selectedAnswer.EmployeeAnswers)
                {
                    <div class="answer-part card  mt-3">
                        <div class="bg-warning answer-part-name card-header fw-bold">
                            @answer.Question.QuestionText
                        </div>
                        <div class="answer-part-value card-body">
                            @answer.AnswerText
                        </div>
                    </div>
                    @if(_selectedAnswer.ManagerAnswer is not null)
                    {
                        <div class="answer-part card  mt-3">
                            <div class="bg-info answer-part-name card-header fw-bold">
                                Twoja odpowiedź
                            </div>
                            <div class="answer-part-value card-body">
                                @_selectedAnswer.ManagerAnswer?.ManagerAnswersTexts.FirstOrDefault(a => a.QuestionId == @answer.Question.QuestionId)?.AnswerText
                            </div>
                        </div>
                    }
                }
            }
            </div>
        </div>
    </div>
</div>

@code {
    private int _userId = 0;
    private List<Evaluation> _directAnswers = [];
    private List<Evaluation> _indirectAnswers = [];
    private string _filterName = "";
    private string _filterYear = "-1";
    private int _selectedAnswerId = -1;
    private Evaluation? _selectedAnswer = null;
    
    private IEnumerable<Evaluation> FilteredDirectAnswers =>
        _directAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.ManagerId != null &&
              e.EmployeeName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.CreatedAt.Year.ToString() == _filterYear)
            );

    private IEnumerable<Evaluation> FilteredIndirectAnswers =>
        _indirectAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.ManagerId != null &&
              e.EmployeeName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.CreatedAt.Year.ToString() == _filterYear)
        );

    
    protected override async Task OnInitializedAsync()
    {
        var appAuthStateProvider = (AppAuthStateProvider)AuthenticationStateProvider;
        var authState = await appAuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true && !authState.User.IsInRole("admin"))
        {
            Nav.NavigateTo("/login");
        }
        
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserId");
        if (userIdClaim != null)
        {
            _userId = int.Parse(userIdClaim.Value);
        }

        _directAnswers = await EvaluationService.GetAllDirectEvaluationsAsync(_userId);
        _indirectAnswers = await EvaluationService.GetAllIndirectEvaluationsAsync(_userId);

    }

    private void ChangeSelectedAnswerId(int id)
    {
        _selectedAnswerId = id;
        _selectedAnswer = _directAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId)
                               ?? _indirectAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId);
    }
    [Inject] IJSRuntime JS { get; set; } = default!;

    private async Task PrintFragment()
    {
        // Przekazujemy identyfikator elementu, który chcemy wydrukować
        await JS.InvokeVoidAsync("printFragment", "printArea");
    }

    private void RedirectToAnswerFrom()
    {
        Nav.NavigateTo($"/odpowiedz-na-ocene/{_selectedAnswerId}");
    }

}

