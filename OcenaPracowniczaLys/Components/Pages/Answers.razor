@page "/odpowiedzi"
@using Microsoft.AspNetCore.Components.Authorization
@using OcenaPracowniczaLys.Data
@using OcenaPracowniczaLys.Services
@using OcenaPracowniczaLys.TextAssets
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "user,owner")]
@inject AuthenticationStateProvider AuthProvider
@inject IEvaluationService EvaluationService
@inject IDepartmentService DepartamentService
<div class="container-fluid min-vh-100 d-flex">
    <div class="row w-100">
        <div class="col-md-3">
            <span class="mt-2">
                <label class="form-label" for="name">Imię i nazwisko</label>
                <InputText class="form-control" id="name" @bind-Value="@_filterName"/>
            </span>
            <span class="mt-2">
                        <label class="form-label" for="supervisor">Przełożony bezpośredni</label>
                        <InputSelect id="supervisor" class="form-select" @bind-Value="@_filterYear">
                            <option value="-1">Wybierz rok</option>
                            @for (int i = 2023; i < 2028; i++)
                            {
                                <option value="@i">@i.ToString()</option>
                            }
                        </InputSelect>
                    </span>
            <ul class="mt-3 list-group">
                <li class="list-group-item">
                    Bezpośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredDirectOfficeAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                                >@ev.UserName @ev.Date.Year</li>
                        }
                        @foreach (var ev in FilteredDirectProductionAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.UserName @ev.Date.Year</li>
                        }
                    </ul>
                </li>
                <li class="list-group-item">
                    Pośrednio
                    <ul class="list-group mt-2">
                        @foreach (var ev in FilteredIndirectOfficeAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.UserName @ev.Date.Year</li>
                        }
                        @foreach (var ev in FilteredIndirectProductionAnswers)
                        {
                            <li @onclick="@(() => ChangeSelectedAnswerId(ev.EvaluationId))" 
                                class="list-group-item @( _selectedAnswerId == ev.EvaluationId ? "active" : "" )"
                            >@ev.UserName @ev.Date.Year</li>
                        }
                    </ul>
                </li>
            </ul>
        </div>
        <div class="col-md-9">
            <button class="btn btn-primary" @onclick="PrintFragment">Drukuj fragment</button>
            <div id="printArea">
            @if (_selectedAnswerId != -1 && _selectedAnswerBiuro != null)
            {
                <div class="d-flex">
                <div class="answer-part card mt-3 col-md-4">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Dział
                    </div>
                    <div class="answer-part-value card-body">
                        @_departments.FirstOrDefault(d => d.DepartmentId == _selectedAnswerBiuro.DepartmentId)?.DepartmentName
                    </div>
                </div>
                <div class="answer-part card mt-3 col-md-4">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Imię i nazwisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswerBiuro.UserName
                    </div>
                </div>
                <div class="answer-part card mt-3 col-md-4">
                    <div class="bg-warning answer-part-name card-header fw-bold">
                        Stanowisko
                    </div>
                    <div class="answer-part-value card-body">
                        @_selectedAnswerBiuro.Stanowisko
                    </div>
                </div>
                </div>
                @for (int i = 0; i < 11; i++)
                {
                    <div class="answer-part card  mt-3">
                        <div class="bg-warning answer-part-name card-header fw-bold">
                            @QuestionSets.OfficeQuestions[i]
                        </div>
                        <div class="answer-part-value card-body">
                            @_selectedAnswerBiuro.GetType().GetProperty($"Question{i + 1}")?.GetValue(_selectedAnswerBiuro)
                        </div>
                    </div>
                }
            }
            </div>
        </div>
    </div>
</div>

@code {
    private int _userId = 0;
    private List<Evaluationbiuro> _directOfficeAnswers = [];
    private List<Evaluationbiuro> _indirectOfficeAnswers = [];
    private List<Evaluationsprodukcja> _directProductionAnswers = [];
    private List<Evaluationsprodukcja> _indirectProductionAnswers = [];
    private List<Department> _departments = [];
    private string _filterName = "";
    private string _filterYear = "-1";
    private int _selectedAnswerId = -1;

    private Evaluationbiuro? _selectedAnswerBiuro = null;

    private Evaluationsprodukcja? _selectedAnswerProdukcja = null;
    
    private IEnumerable<Evaluationbiuro> FilteredDirectOfficeAnswers =>
        _directOfficeAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.UserName != null &&
              e.UserName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.Date.Year.ToString() == _filterYear)
            );

    private IEnumerable<Evaluationsprodukcja> FilteredDirectProductionAnswers =>
        _directProductionAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.UserName != null &&
              e.UserName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.Date.Year.ToString() == _filterYear)
        );

    private IEnumerable<Evaluationbiuro> FilteredIndirectOfficeAnswers =>
        _indirectOfficeAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.UserName != null &&
              e.UserName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.Date.Year.ToString() == _filterYear)
        );

    private IEnumerable<Evaluationsprodukcja> FilteredIndirectProductionAnswers =>
        _indirectProductionAnswers.Where(e =>
            (string.IsNullOrWhiteSpace(_filterName) || 
             (e.UserName != null &&
              e.UserName.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0))
            &&
            (string.IsNullOrWhiteSpace(_filterYear) || _filterYear == "-1" ||
             e.Date.Year.ToString() == _filterYear)
        );
    
    private IEnumerable<T> FilterEvaluations<T>(IEnumerable<T> evaluations, Func<T, string?> selector)
    {
        // Jeśli filtr jest pusty, zwracamy całą listę
        if (string.IsNullOrWhiteSpace(_filterName))
        {
            return evaluations;
        }
        // Przefiltrowujemy listę, sprawdzając czy wynik selekcji zawiera _filterName
        return evaluations.Where(e =>
            !string.IsNullOrWhiteSpace(selector(e)) &&
            selector(e)!.IndexOf(_filterName, StringComparison.OrdinalIgnoreCase) >= 0);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserId");
        if (userIdClaim != null)
        {
            _userId = int.Parse(userIdClaim.Value);
        }

        _directOfficeAnswers = await EvaluationService.GetAllDirectEvaluationsOfficeAsync(_userId);
        _indirectOfficeAnswers = await EvaluationService.GetAllIndirectEvaluationsOfficeAsync(_userId);
        _directProductionAnswers = await EvaluationService.GetAllDirectEvaluationsProductionAsync(_userId);
        _indirectProductionAnswers = await EvaluationService.GetAllIndirectEvaluationsProductionAsync(_userId);
        _departments = await DepartamentService.GetAllDepartmentsAsync();

    }

    private void ChangeSelectedAnswerId(int id)
    {
        _selectedAnswerId = id;
        _selectedAnswerBiuro = _directOfficeAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId)
                               ?? _indirectOfficeAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId);
        _selectedAnswerProdukcja = _directProductionAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId)
                                   ?? _indirectProductionAnswers.FirstOrDefault(e => e.EvaluationId == _selectedAnswerId);
    }
    [Inject] IJSRuntime JS { get; set; } = default!;

    private async Task PrintFragment()
    {
        // Przekazujemy identyfikator elementu, który chcemy wydrukować
        await JS.InvokeVoidAsync("printFragment", "printArea");
    }
}

