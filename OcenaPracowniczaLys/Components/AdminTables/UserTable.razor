@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using OcenaPracowniczaLys.Components.Popups
@using OcenaPracowniczaLys.Data
@using OcenaPracowniczaLys.Services
@attribute [Authorize(Roles = "admin")]
@inject IUserService UserService
@inject IDepartmentService DepartmentService
@inject IToastService Toast


<div class="panel-fragment">
    <button class="btn btn-primary mt-2 mb-2" @onclick="ShowAddUserForm">Dodaj</button>
    <div id="user-panel" class="admin-table overflow-auto border border-dark rounded mt-3">
        <table class="table table-striped table-bordered">
            <thead>
            <tr class="sticky-top my-sticky-top bg-white">
                <th scope="col" class="text-center align-middle">ID</th>
                <th scope="col" class="text-center align-middle">Imię i nazwisko</th>
                <th scope="col" class="text-center align-middle">Login</th>
                <th scope="col" class="text-center align-middle">Aktywny</th>
                <th scope="col" class="text-center align-middle">Kierownik</th>
                <th scope="col" class="text-center align-middle">Dezaktywuj</th>
                <th scope="col" class="text-center align-middle">Zmiana kierownika</th>
                <th scope="col" class="text-center align-middle">Zmiana hasła</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <th scope="row">@user.UserId</th>
                    <td>@user.FullName</td>
                    <td>@user.Login</td>
                    <td>@user.Enabled</td>
                    <td>@(user.ManagerId != null ? Users.FirstOrDefault(u=>u.UserId == user.ManagerId).FullName : "-")</td>
                    <td class="text-center align-middle">
                        <button class="btn btn-danger" @onclick="@(() => ToggleEnableStatus(user.UserId))">
                            <i class="bi bi-power"></i>
                        </button>
                    </td>
                    <td class="text-center align-middle">
                        <button class="btn btn-primary" @onclick="@(() => ShowChangeUserManagerForm(user.UserId))">
                            <i class="bi bi-person-square"></i>
                        </button>
                    </td>
                    <td class="text-center align-middle">
                        <button class="btn btn-primary" @onclick="@(() => ShowChangeUserPasswordForm(user.UserId))">
                            <i class="bi bi-key"></i>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    
</div>
@code {
    [Parameter] public required List<User> Users { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    
    void ShowAddUserForm()
    {
        
        var options = new ModalOptions { };
        var parameters = new ModalParameters()
            .Add(nameof(AddUserPopup.OnUserAdd), EventCallback.Factory.Create(this, ReloadUsers));
        Modal.Show<AddUserPopup>("Dodaj użytkownika", parameters, options);
    }

    async Task ToggleEnableStatus(int userId)
    {
        OperationResult result = await UserService.ToggleEnableStatusAsync(userId);
        if (result.IsSuccess())
            Toast.ShowSuccess(result.Message);
        else
            Toast.ShowError(result.Message);
    }

    void ShowChangeUserPasswordForm(int userId)
    {
        var parameters = new ModalParameters()
            .Add(nameof(ChangePassowrdPopup.UserId), userId);
        Modal.Show<ChangePassowrdPopup>("Zmień hasło", parameters);
    }
    
    void ShowChangeUserManagerForm(int userId)
    {
        var options = new ModalOptions { };
        var parameters = new ModalParameters()
            .Add(nameof(ChangeUserManagerPopup.UserId), userId)
            .Add(nameof(ChangeUserManagerPopup.OnManagerChanged), EventCallback.Factory.Create(this, ReloadUsers));
        Modal.Show<ChangeUserManagerPopup>("Zmień kierownika", parameters, options);
    }
    
    private async Task ReloadUsers()
    {
        Users = await UserService.GetAllUsersAsync();
        StateHasChanged(); 
    }
}